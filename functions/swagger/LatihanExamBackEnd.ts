//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class LatihanExamBackEndClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param fileName (optional) 
     * @return Success
     */
    blob(fileName: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Blob?";
        if (fileName === null)
            throw new Error("The parameter 'fileName' cannot be null.");
        else if (fileName !== undefined)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBlob(_response);
        });
    }

    protected processBlob(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param fileName (optional) 
     * @return Success
     */
    redirect(fileName: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Blob/redirect?";
        if (fileName === null)
            throw new Error("The parameter 'fileName' cannot be null.");
        else if (fileName !== undefined)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRedirect(_response);
        });
    }

    protected processRedirect(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param fileName (optional) 
     * @return Success
     */
    presignedPutObject(fileName: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Blob/presigned-put-object?";
        if (fileName === null)
            throw new Error("The parameter 'fileName' cannot be null.");
        else if (fileName !== undefined)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPresignedPutObject(_response);
        });
    }

    protected processPresignedPutObject(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    blobInformation(body: BlobInformationRequest | undefined): Promise<BlobInformationResponse> {
        let url_ = this.baseUrl + "/api/Blob/blob-information";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBlobInformation(_response);
        });
    }

    protected processBlobInformation(response: Response): Promise<BlobInformationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BlobInformationResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BlobInformationResponse>(null as any);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    cinemaListNormal(model: GetCinemaNormalRequest | undefined): Promise<GetCinemaNormalResponse> {
        let url_ = this.baseUrl + "/api/Cinema/cinema-list-normal?";
        if (model === null)
            throw new Error("The parameter 'model' cannot be null.");
        else if (model !== undefined)
            url_ += "model=" + encodeURIComponent("" + model) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCinemaListNormal(_response);
        });
    }

    protected processCinemaListNormal(response: Response): Promise<GetCinemaNormalResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetCinemaNormalResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCinemaNormalResponse>(null as any);
    }

    /**
     * @param limit (optional) 
     * @param offset (optional) 
     * @return Success
     */
    cinemaList(limit: number | undefined, offset: number | undefined): Promise<GetCinemaResponse> {
        let url_ = this.baseUrl + "/api/Cinema/cinema-list?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCinemaList(_response);
        });
    }

    protected processCinemaList(response: Response): Promise<GetCinemaResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetCinemaResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCinemaResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    cinemaDetail(id: string | undefined): Promise<GetSpecificCinemaResponse> {
        let url_ = this.baseUrl + "/api/Cinema/cinema-detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCinemaDetail(_response);
        });
    }

    protected processCinemaDetail(response: Response): Promise<GetSpecificCinemaResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetSpecificCinemaResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetSpecificCinemaResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @param address (optional) 
     * @param blobId (optional) 
     * @return Success
     */
    updateCinema(id: string | undefined, address: string | undefined, blobId: string | undefined): Promise<UpdateCinemaResponse> {
        let url_ = this.baseUrl + "/api/Cinema/UpdateCinema?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (address === null)
            throw new Error("The parameter 'address' cannot be null.");
        else if (address !== undefined)
            url_ += "Address=" + encodeURIComponent("" + address) + "&";
        if (blobId === null)
            throw new Error("The parameter 'blobId' cannot be null.");
        else if (blobId !== undefined)
            url_ += "BlobId=" + encodeURIComponent("" + blobId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCinema(_response);
        });
    }

    protected processUpdateCinema(response: Response): Promise<UpdateCinemaResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UpdateCinemaResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateCinemaResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerCinema(body: RegisterCinemaRequest | undefined): Promise<RegisterCinemaResponse> {
        let url_ = this.baseUrl + "/register-cinema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterCinema(_response);
        });
    }

    protected processRegisterCinema(response: Response): Promise<RegisterCinemaResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RegisterCinemaResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegisterCinemaResponse>(null as any);
    }

    /**
     * @param nextId (optional) 
     * @param prevId (optional) 
     * @param limit (optional) 
     * @return Success
     */
    getTheaterList(nextId: number | undefined, prevId: number | undefined, limit: number | undefined): Promise<GetTheaterResponse> {
        let url_ = this.baseUrl + "/api/Theater/get-theater-list?";
        if (nextId === null)
            throw new Error("The parameter 'nextId' cannot be null.");
        else if (nextId !== undefined)
            url_ += "NextId=" + encodeURIComponent("" + nextId) + "&";
        if (prevId === null)
            throw new Error("The parameter 'prevId' cannot be null.");
        else if (prevId !== undefined)
            url_ += "PrevId=" + encodeURIComponent("" + prevId) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTheaterList(_response);
        });
    }

    protected processGetTheaterList(response: Response): Promise<GetTheaterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetTheaterResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTheaterResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerTheater(body: RegisterTheaterRequest | undefined): Promise<RegisterTheaterResponse> {
        let url_ = this.baseUrl + "/api/Theater/register-theater";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterTheater(_response);
        });
    }

    protected processRegisterTheater(response: Response): Promise<RegisterTheaterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RegisterTheaterResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegisterTheaterResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    theaterDetail(id: number | undefined): Promise<GetTheaterDetailResponse> {
        let url_ = this.baseUrl + "/api/Theater/theater-detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTheaterDetail(_response);
        });
    }

    protected processTheaterDetail(response: Response): Promise<GetTheaterDetailResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetTheaterDetailResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTheaterDetailResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @param cinemaId (optional) 
     * @param typeId (optional) 
     * @return Success
     */
    updateTheater(id: number | undefined, cinemaId: string | undefined, typeId: string | undefined): Promise<UpdateTheaterResponse> {
        let url_ = this.baseUrl + "/api/Theater/update-theater?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (cinemaId === null)
            throw new Error("The parameter 'cinemaId' cannot be null.");
        else if (cinemaId !== undefined)
            url_ += "CinemaId=" + encodeURIComponent("" + cinemaId) + "&";
        if (typeId === null)
            throw new Error("The parameter 'typeId' cannot be null.");
        else if (typeId !== undefined)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTheater(_response);
        });
    }

    protected processUpdateTheater(response: Response): Promise<UpdateTheaterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UpdateTheaterResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateTheaterResponse>(null as any);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    theaterTypeList(model: GetTheaterTypeRequest | undefined): Promise<GetTheaterTypeResponse> {
        let url_ = this.baseUrl + "/api/TheaterType/theater-type-list?";
        if (model === null)
            throw new Error("The parameter 'model' cannot be null.");
        else if (model !== undefined)
            url_ += "model=" + encodeURIComponent("" + model) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTheaterTypeList(_response);
        });
    }

    protected processTheaterTypeList(response: Response): Promise<GetTheaterTypeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetTheaterTypeResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTheaterTypeResponse>(null as any);
    }

    /**
     * @return Success
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as WeatherForecast[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export interface BlobInformationRequest {
    id?: string;
    fileName?: string | undefined;
    mime?: string | undefined;
}

export interface BlobInformationResponse {
    success?: string | undefined;
}

export interface CinemaDetails {
    id?: string | undefined;
    name?: string | undefined;
    blobId?: string | undefined;
    fileUrl?: string | undefined;
}

export interface GetCinemaNormalRequest {
}

export interface GetCinemaNormalResponse {
    cinemaId?: string | undefined;
    cinemaName?: string | undefined;
}

export interface GetCinemaResponse {
    cinemas?: CinemaDetails[] | undefined;
    totalData?: number;
}

export interface GetSpecificCinemaResponse {
    address?: string | undefined;
    blobName?: string | undefined;
}

export interface GetTheaterDetailResponse {
    typeId?: string | undefined;
    typeName?: string | undefined;
    cinemaId?: string | undefined;
    cinemaName?: string | undefined;
}

export interface GetTheaterResponse {
    theaters?: TheaterDetails[] | undefined;
    nextCursor?: string | undefined;
    prevCursor?: string | undefined;
}

export interface GetTheaterTypeRequest {
}

export interface GetTheaterTypeResponse {
    typeId?: string | undefined;
    typeName?: string | undefined;
}

export interface RegisterCinemaRequest {
    name?: string | undefined;
    address?: string | undefined;
    blobId?: string | undefined;
}

export interface RegisterCinemaResponse {
    success?: string | undefined;
}

export interface RegisterTheaterRequest {
    id?: string | undefined;
    name?: string | undefined;
    cinemaId?: string | undefined;
    theaterTypeId?: string | undefined;
}

export interface RegisterTheaterResponse {
    success?: string | undefined;
}

export interface TheaterDetails {
    id?: number;
    name?: string | undefined;
    cinemaName?: string | undefined;
    theaterType?: string | undefined;
}

export interface UpdateCinemaResponse {
    success?: string | undefined;
}

export interface UpdateTheaterResponse {
    success?: string | undefined;
}

export interface WeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}